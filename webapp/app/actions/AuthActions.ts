import axios from 'axios';
import {
    AUTH_USER,
    AUTH_ERROR,
    ME_FROM_TOKEN,
    ME_FROM_TOKEN_FAILURE,
    ME_FROM_TOKEN_SUCCESS,
    START_FETCHING,
    END_FETCHING
} from './types';
import { Dispatch } from 'redux';
import { AuthAction } from '../reducers/auth';
import { SysAction } from '../reducers/sys';
import { SignUpInfo } from '../common/model/SignUpInfo';

export const signup = (signupInfo: SignUpInfo, callback: Function) => async (
    dispatch: Dispatch<AuthAction | SysAction>
) => {
    try {
        dispatch({ type: START_FETCHING });
        const response = await axios.post('/api/signup', signupInfo);
        dispatch({ type: END_FETCHING, payload: '' });
        dispatch({ type: AUTH_USER, user: response.data.user });
        localStorage.setItem('token', response.data.token);
        callback();
    } catch (e) {
        dispatch({ type: END_FETCHING, payload: '' });
        dispatch({ type: AUTH_ERROR, errorMessage: e.response.data.error });
    }
};

export const login = (
    loginInfo: { username: string; password: string },
    callback: Function
) => async (dispatch: Dispatch<AuthAction | SysAction>) => {
    try {
        dispatch({ type: START_FETCHING });
        const response = await axios.post('/api/login', loginInfo);
        dispatch({ type: END_FETCHING, payload: '' });
        dispatch({ type: AUTH_USER, user: response.data.user });
        localStorage.setItem('token', response.data.token);
        callback();
    } catch (e) {
        dispatch({ type: END_FETCHING, payload: '' });
        dispatch({ type: AUTH_ERROR, errorMessage: 'Usuario o Contraseña inválidos' });
    }
};

export const signout = () => {
    localStorage.removeItem('token');

    return {
        type: AUTH_USER,
        user: ''
    };
};

export const loadUserFromToken = () => async (
    dispatch: Dispatch<AuthAction | SysAction>
) => {
    const token = localStorage.getItem('token');
    if (!token || token === '') {
        // if there is no token, dont bother
        return;
    }

    // fetch user from token (if server deems it's valid token)
    dispatch(meFromToken());

    meFromTokenRequest(token).then((response) => {
        const error = (response as any).error;
        if (!error) {
            // reset token (possibly new token that was regenerated by the server)
            localStorage.setItem('token', response.data.token);
            dispatch(meFromTokenSuccess(response.data.user));
        } else {
            localStorage.removeItem('token'); // remove token from storage
            dispatch(meFromTokenFailure(response.data));
        }
    });
};

export function meFromTokenRequest(tokenFromStorage) {
    // check if the token is still valid, if so, get me from the server

    const request = axios({
        method: 'get',
        url: `/api/me/from/token?token=${tokenFromStorage}`,
        headers: {
            Authorization: `Bearer ${tokenFromStorage}`
        }
    });
    return request;
}

export function meFromToken(): AuthAction {
    // check if the token is still valid, if so, get me from the server
    return {
        type: ME_FROM_TOKEN
    };
}

export function meFromTokenSuccess(currentUser): AuthAction {
    return {
        type: ME_FROM_TOKEN_SUCCESS,
        user: currentUser
    };
}

export function meFromTokenFailure(error): AuthAction {
    return {
        type: ME_FROM_TOKEN_FAILURE,
        payload: error
    };
}

export function cleanError(): AuthAction {
    return { type: AUTH_ERROR, errorMessage: '' };
}
